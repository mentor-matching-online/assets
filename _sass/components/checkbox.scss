.checkboxes--item {
	@include font($size: 19);

	display: block;
	position: relative;

	min-height: $checkboxes-size;

	margin-bottom: spacing(2);
	padding-left: $checkboxes-size;

	clear: left;
}

.checkboxes--item:last-child,
.checkboxes--item:last-of-type {
	margin-bottom: 0;

	&:first-child,
	&:last-of-type {
		margin-bottom: spacing(5) !important;
	}
}

.checkboxes--input {


	cursor: pointer;

	position: absolute;

	z-index: 1;
	top: $checkboxes--input-offset * -1;
	left: $checkboxes--input-offset * -1;

	width: $touch-target-size;
	height: $touch-target-size;
	margin: 0;

	opacity: 0;

}

.checkboxes--label {
	display: inline-block;
	margin-bottom: 0;
	padding: 8px spacing(3) spacing(1);
	cursor: pointer;
	// remove 300ms pause on mobile
	touch-action: manipulation;
	font-weight: normal !important;
}

// [ ] Check box
.checkboxes--label:before {
	content: "";
	box-sizing: border-box;
	position: absolute;
	top: 0;
	left: 0;
	width: $checkboxes-size;
	height: $checkboxes-size;
	border: $border-width-form-element solid currentColor;
	background: transparent;
}

// ✔ Check mark
//
// The check mark is a box with a border on the left and bottom side (└──),
// rotated 45 degrees
.checkboxes--label:after {
	content: "";
	box-sizing: border-box;

	position: absolute;
	top: 11px;
	left: 9px;
	width: 23px;
	height: 12px;

	transform: rotate(-45deg);
	border: solid;
	border-width: 0 0 5px 5px;
	border-color: $checkboxes-button--color;
	// Fix bug in IE11 caused by transform rotate (-45deg).
	border-top-color: transparent;

	opacity: 0;

	background: transparent;
}

.checkboxes--hint {
	color: $secondary-text-color;
	display: block;
}

// Focused state
.checkboxes--input:focus + .checkboxes--label:before {
	border-width: 4px;

	// When colors are overridden, the yellow box-shadow becomes invisible
	// which means the focus state is less obvious. By adding a transparent
	// outline, which becomes solid (text-colored) in that context, we ensure
	// the focus remains clearly visible.
	outline: $focus-width solid transparent;
	outline-offset: 1px;

	// When in an explicit forced-color mode, we can use the Highlight system
	// color for the outline to better match focus states of native controls
	@media screen and (forced-colors: active), (-ms-high-contrast: active) {
	  outline-color: Highlight;
	}

	box-shadow: 0 0 0 $focus-width $checkboxes-color--focus;
}

// Selected state
.checkboxes--input:checked + .checkboxes--label:after {
	opacity: 1;
}

// Disabled state
.checkboxes--input:disabled,
.checkboxes--input:disabled + .checkboxes--label {
	cursor: default;
}

.checkboxes--input:disabled + .checkboxes--label {
	opacity: .5;
}

// =========================================================
// Small checkboxes
// =========================================================

.checkboxes--small {

$checkboxes--input-offset: ($touch-target-size - $small-checkboxes-size) * 0.5;
$label-offset: $touch-target-size - $checkboxes--input-offset;

.checkboxes--item {
	@include clearfix;
	min-height: 0;
	margin-bottom: 0;
	padding-left: $label-offset;
	float: left;
}

// Shift the touch target into the left margin so that the visible edge of
// the control is aligned
//
//   ┆What colors do you like?
//  ┌┆───┐
//  │┆[] │ Purple
//  └┆▲──┘
//  ▲┆└─ Check box pseudo element, aligned with margin
//  └─── Touch target (invisible input), shifted into the margin
.checkboxes--input {
	left: $checkboxes--input-offset * -1;
}

// Adjust the size and position of the label.
//
// Unlike larger checkboxes, we also have to float the label in order to
// 'shrink' it, preventing the hover state from kicking in across the full
// width of the parent element.
.checkboxes--label {
	margin-top: -2px;
	padding: 13px spacing(3) 13px 1px !important;
	float: left;

	@include media-query($from: tablet) {
		padding: 11px spacing(3) 10px 1px !important;
	}
}

// [ ] Check box
//
// Reduce the size of the check box [1], vertically center it within the
// touch target [2]
.checkboxes--label:before {
	top: $checkboxes--input-offset - $border-width-form-element; // 2
	width: $small-checkboxes-size; // 1
	height: $small-checkboxes-size; // 1
}

// ✔ Check mark
//
// Reduce the size of the check mark and re-align within the checkbox
.checkboxes--label:after {
  top: 15px;
  left: 6px;
  width: 12px;
  height: 6.5px;
  border-width: 0 0 3px 3px;
}

// Fix position of hint with small checkboxes
//
// Do not use hints with small checkboxes – because they're within the input
// wrapper they trigger the hover state, but clicking them doesn't actually
// activate the control.
//
// (If you do use them, they won't look completely broken... but seriously,
// don't use them)
.checkboxes--hint {
  padding: 0;
  clear: both;
}

// Hover state for small checkboxes.
//
// We use a hover state for small checkboxes because the touch target size
// is so much larger than their visible size, and so we need to provide
// feedback to the user as to which checkbox they will select when their
// cursor is outside of the visible area.
.checkboxes--item:hover .checkboxes--input:not(:disabled) + .checkboxes--label:before {
  box-shadow: 0 0 0 $hover-width $checkboxes-color--hover;
}

// Because we've overridden the border-shadow provided by the focus state,
// we need to redefine that too.
//
// We use two box shadows, one that restores the original focus state [1]
// and another that then applies the hover state [2].
.checkboxes--item:hover .checkboxes--input:focus + .checkboxes--label:before {
  box-shadow:
	0 0 0 $focus-width $checkboxes-color--focus, // 1
	0 0 0 $hover-width $checkboxes-color--hover; // 2
}

// For devices that explicitly don't support hover, don't provide a hover
// state (e.g. on touch devices like iOS).
//
// We can't use `@media (hover: hover)` because we wouldn't get the hover
// state in browsers that don't support `@media (hover)` (like Internet
// Explorer) – so we have to 'undo' the hover state instead.
@media (hover: none), (pointer: coarse) {
  .checkboxes--item:hover .checkboxes--input:not(:disabled) + .checkboxes--label:before {
	box-shadow: initial;
  }

  .checkboxes--item:hover .checkboxes--input:focus + .checkboxes--label:before {
	box-shadow: 0 0 0 $focus-width $checkboxes-color--focus;
  }
}
}